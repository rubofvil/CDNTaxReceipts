<?php

const CDNTAX_SETTINGS = 'CDNTaxReceipts';

/**
 * processTaxReceipt()
 * Accepts an associative array containing receipt variables, and:
 * - generates a PDF file using the provided variables
 * - sends a copy of the receipt to the email archive
 * - emails the receipt to the donor if issue_method='email'
 * - logs the receipt to the audit log
 *
 * This method is common to both single and annual receipts.
 */
function cdntaxreceipts_processTaxReceipt( $receipt, &$collectedPdf = NULL, $previewMode = FALSE ) {
  require_once 'CRM/Cdntaxreceipts/PseudoConstants.php';
  $session = CRM_Core_Session::singleton();
  $current_user = $session->get('userID');  



  $params = array(
    'version' => 3,
    'sequential' => 1,
    'activity_type_id' => ACTIVITY_TYPE_ID_TAX,
    'contact_id' => $current_user,
    'custom_1' => date("Y"),
    'custom_2' => 'single',
    'status_id' => '2',
    'target_contact_id' => $receipt['contact_id'],
  );
  $result = civicrm_api('Activity', 'create', $params);

  // determine the send method
  require_once('CRM/Contact/BAO/Contact.php');
  list($displayname, $email) = CRM_Contact_BAO_Contact::getContactDetails($receipt['contact_id']);

  // generate the PDF file  
  list($pdf_file, $user_friendly) = cdntaxreceipts_generateFormattedReceipt( $receipt, $collectedPdf, $previewMode );


  // form a mailParams array to pass to the CiviCRM mail utility
  $attachment = array(
    'fullPath' => $pdf_file,
    'mime_type' => 'application/pdf',
    'cleanName' => $user_friendly,
  );

  $email_message = CRM_Core_BAO_Setting::getItem(CDNTAX_SETTINGS, 'email_message');
  $org_name = CRM_Core_BAO_Setting::getItem(CDNTAX_SETTINGS, 'org_name');

  $email_subject_admin = CRM_Core_BAO_Setting::getItem(CDNTAX_SETTINGS, 'email_subject');
  $email_subject = $email_subject_admin . ' ' . $receipt['receipt_no'];

  $email_from = CRM_Core_BAO_Setting::getItem(CDNTAX_SETTINGS, 'email_from');
  $email_archive = CRM_Core_BAO_Setting::getItem(CDNTAX_SETTINGS, 'email_archive');

  $mailparams = array(
    'from' => $org_name . ' <' . $email_from . '> ',
    'toName' => $displayname,
    'attachments' => array( $attachment ),
    'subject' => $email_subject,
    'text' => $email_message,
    'returnPath' => $email_from,
  );

  //Configuration if the user want the functionality send by email
  $params = array( 
    'version' => 3,
    'domain_id' => 1,
    'return' => 'send_mail_tax_receipt',
  );

  $result = civicrm_api('Setting', 'get', $params);  
  
  if(isset($result['values'][1])) {
    $gen_conf_send_by_email = $result['values'][1];
  }
  else {
    $gen_conf_send_by_email =  0;
  }


  // if method is email, we send to contact and BCC email archive.
  // if method is print, we send to email archive only.
  if ( $receipt['issue_method'] == 'email' && $gen_conf_send_by_email) {
    $mailparams['toEmail'] = $email;
    $mailparams['bcc'] = $email_archive;
  }
  else {
    $mailparams['toEmail'] = $email_archive;
  }

  if ( $previewMode ) {
    $ret = TRUE;
  }
  else {    
    $ret = CRM_Utils_Mail::send( $mailparams );    
    if ( $ret == TRUE ) {      
      // we have successfully processed.  Log the receipt.
      cdntaxreceipts_log($receipt);
    }    
  }  
  if ( $receipt['issue_method'] == 'email' ) {

    //unlink($pdf_file); // file now is needed
    return array( $ret, 'email', NULL );
  }
  else { //xxxxxxxxxxxxxx
    if ( isset($collectedPdf) ) {
      //unlink($pdf_file); // file now is needed
      $pdf_file = NULL;
    }
    // if not unset, cron will clean up the PDF file later on
    cdntaxreceipts_log($receipt);   
    
    return array( TRUE, 'print', $pdf_file );
  }
}
/**
 * generateFormattedReceipt()
 * Accepts an associative array of receipt variables and produces a PDF file.
 * This function should always be called through processTaxReceipt().  It is imperative
 * that each receipt generated by the system gets logged and archived properly.
 */
function cdntaxreceipts_generateFormattedReceipt( $receipt, &$collectedPdf = NULL, $previewMode = FALSE ) {  
  require_once 'CRM/Cdntaxreceipts/PseudoConstants.php';  
  
  $address = cdntaxreceipts_getAddress($receipt['contact_id']);

  $address_line_1 = isset($address['street_address']) ? $address['street_address'] : '';
  $parts = array();
  foreach(array('city', 'state_province', 'postal_code')  as $addr_part) {
    if (isset($address[$addr_part])) {
      $parts[] = $address[$addr_part];
    }
  }
  $address_line_2 = implode(' ', $parts);
  $address_line_3 = isset($address['country']) ? $address['country'] : '';

  list($displayname, $email) = CRM_Contact_BAO_Contact::getContactDetails($receipt['contact_id']);
  if ( $receipt['issue_type'] == 'single' ) {
    $pos = strpos($receipt['receive_date'], '-');
    if ($pos === FALSE) {
      $date = substr($receipt['receive_date'], 0, 8);
      $display_date = substr($date, 0, 4) . '-' . substr($date, 4, 2) . '-' . substr($date, 6, 2);
    }
    else {
      $display_date = substr($receipt['receive_date'], 0, 10);
    }
    $display_year = '';
  }
  else {
    $display_year = $receipt['receive_date'];
    $display_date = date('M j, Y', mktime(0,0,0,1,1,$receipt['receive_date'])) . ' - ' . date('M j, Y', mktime(0,0,0,12,31,$receipt['receive_date']));
  }  

  $config = CRM_Core_Config::singleton();    
  $defaults = array();

  if($receipt["is_duplicate"]) {
    $params = array( "id" => CRM_Core_BAO_Setting::getItem(CDNTAX_SETTINGS, 'original_template') );
  }
  else{
    $params = array( "id" => CRM_Core_BAO_Setting::getItem(CDNTAX_SETTINGS, 'copy_template') );
  }

  $page = CRM_Core_BAO_MessageTemplates::retrieve($params, $defaults);

  $template = array($page->msg_html);  

  //Get the pdf format
  $params = array( "id" => CRM_Core_BAO_Setting::getItem(CDNTAX_SETTINGS, 'pdf_format'));
  $format_page_pdf = CRM_Core_BAO_PdfFormat::retrieve($params, $defaults);  
  $format_page_pdf = json_decode( $format_page_pdf->value, true);     
  
  $page = $page->msg_html;
  
  $tokens = array();
  $tokens = CRM_Utils_Token::getTokens($page);  
  $categories = array_keys($tokens);      



  $params = array('contribution_id' => $receipt['contributions']['0']['contribution_id']);
  $contribution = CRM_Utils_Token::getContributionTokenDetails($params,
    NULL,
    NULL,
    $tokens,
    'CRM_Contribution_Form_Task_PDFLetterCommon'
  );
  
  
  $params = array("contact_id" => $receipt['contact_id']);
  list($contact) = CRM_Utils_Token::getTokenDetails($params ,
    NULL ,
    NULL ,
    NULL ,
    NULL ,
    $tokens ,
    'CRM_Contact_Form_Task_PDFLetterCommon'  
  );    

  $page = CRM_Utils_Token::replaceContactTokens($page, $contact[$receipt['contact_id']], TRUE, $tokens);
  $page = CRM_Utils_Token::replaceContributionTokens($page, $contribution[$receipt['contributions']['0']['contribution_id']], TRUE, $tokens);    
  $page = replaceReceiptTokens($page, $receipt, TRUE, $tokens);   
  
  $pdf = CRM_Utils_PDF_Utils::html2pdf($page, TRUE , TRUE, $format_page_pdf);

  $config = CRM_Core_Config::singleton();

  $file_path = $config->customFileUploadDir . "/" . 'Receipt-' . $receipt['receipt_no'] . date("H:i:s") . '.pdf';

  file_put_contents($file_path, $pdf);

  return array($file_path, NULL);
}

/**************************************
 * SECTION: Utility Functions
 */

/**
 * set up the custom field structure for In-Kind tax receipts
 */

function cdntaxreceipts_configure_inkind_fields() {

  // check if the In-kind contribtion type exists.  if not, create it.
  $dao = _cdntaxreceipts_get_contribution_dao();
  $dao->name = 'In-kind';

  if ( ! $dao->find(true) ) {
    $dao->name = 'In-kind';
    $dao->is_deductible = TRUE;
    $dao->is_active = TRUE;
    $dao->save();
  }

  $contrib_type_id = $dao->id;

  // check if the custom group exists.  if not, create it.
  $params = array(
    'title' => 'In-kind donation fields',
    'version' => 3,
  );

  require_once 'api/api.php';
  $result = civicrm_api( 'custom_group', 'get', $params );

  if ( $result['count'] == 0 ) {
    $group = array(
      'title' => 'In-kind donation fields',
      'extends' => array( 'Contribution' ),
      'extends_entity_column_value' => array( $contrib_type_id ),
      'collapse_display' => 0,
      'style' => 'Inline',
      'is_active' => 1,
      'version' => 3
    );
    $result =& civicrm_api('custom_group', 'create', $group);
  }
  foreach ( $result['values'] as $id => $detail ) {
    $custom_group_id = $id;
  }

  // check if the custom fields exist.  if not, create them.
  foreach ( array( 'Description of property', 'Appraised by', 'Address of Appraiser', 'Original cost' ) as $field ) {
    $params = array(
      'custom_group_id' => $custom_group_id,
      'label' => $field,
      'version' => 3,
    );
    $result = civicrm_api( 'custom_field', 'get', $params);

    if ( $result['count'] == 0 ) {
      $field_params = array(
        'custom_group_id' => $custom_group_id,
        'label' => $field,
        'data_type' => 'String',
        'is_required' => 1,
        'is_active' => 1,
        'version' => 3,
      );
      if ( $field == 'Original cost' ) {
        $field_params['is_required'] = 0;
        $field_params['help_post'] = 'Amount originally paid for the item. This item is needed for a special rule'.
          ' that applies if either something was purchased in the last ten years'.
          ' with the intent of making a donation, or if an item is donated within three years'.
          ' of being purchased. In both cases the amount that can be claimed is the lesser'.
          ' of the market value, and the amount paid for the item. This item is used to show'.
          ' the cost of the item donated (and the creditable amount) if either of those '.
          ' situations apply.';
      }
      $result =& civicrm_api('custom_field', 'create', $field_params);
    }
  }
}

/**************************************
 * SECTION: Tax Receipt API
 */

/**
 * issueTaxReceipt()
 * Issues a tax receipt for a single contribution.
 * Detects if the receipt is a duplicate and reacts appropriately.
 */
function cdntaxreceipts_issueTaxReceipt( $contribution, &$collectedPdf = NULL, $previewMode = FALSE ) {  

  // This function basically needs to set up a $receipt[] array and pass it to
  // processTaxReceipt() which does the hard work

  // check if a Tax Receipt has already been issued previously for this Contribution
  // user input could be tainted! we want this method to check everything for validity...
  list($issued_on, $receipt_id) = cdntaxreceipts_issued_on($contribution->id);

  // When returning issued_on field:
  //   returns false for non existing $contribution ID
  //   returns 0 for existing but old data
  //   returns timestamp for new data
  $is_duplicate = empty($issued_on) ? 0 : 1;

  if ( $is_duplicate ) {
    // if this was issued as part of an annual receipt, then jump over to the Annual method
    $receipt = cdntaxreceipts_load_receipt($receipt_id);
    if ( $receipt['issue_type'] == 'annual' ) {
      $contactId = $receipt['contact_id'];
      $year = substr($receipt['contributions'][0]['receive_date'], 0, 4);
      return cdntaxreceipts_issueAnnualTaxReceipt($contactId, $year, $collectedPdf, $previewMode);
    }
  }

  // determine the send method
  list( $method, $email ) = cdntaxreceipts_sendMethodForContact($contribution->contact_id);

  // generate a receipt number
  $receipt_no = CRM_Core_BAO_Setting::getItem(CDNTAX_SETTINGS, 'receipt_prefix') . str_pad($contribution->id, 8, 0, STR_PAD_LEFT);

  // process In-Kind variables if this is a receipt for an in-kind contribution

  $contributiontype =  _cdntaxreceipts_get_type_for_contribution($contribution);

  $inkind_values = array();
  // check if this is an 'In-kind' contribution.
  if ( $contributiontype->name == 'In-kind' ) {
    // in this case get the custom field values:
    require_once 'CRM/Core/BAO/CustomField.php';
    $groupTitle = 'In-kind donation fields';
    $fieldLabel_description = 'Description of property';
    $customFieldID_description = CRM_Core_BAO_CustomField::getCustomFieldID( $fieldLabel_description, $groupTitle );
    $fieldLabel_appraisedby = 'Appraised by';
    $customFieldID_appraisedby = CRM_Core_BAO_CustomField::getCustomFieldID( $fieldLabel_appraisedby, $groupTitle );
    $fieldLabel_appraiseraddress = 'Address of Appraiser';
    $customFieldID_appraiseraddress = CRM_Core_BAO_CustomField::getCustomFieldID( $fieldLabel_appraiseraddress, $groupTitle );
    $fieldLabel_cost = 'Original cost';
    $customFieldID_cost = CRM_Core_BAO_CustomField::getCustomFieldID( $fieldLabel_cost, $groupTitle );

    require_once 'CRM/Core/BAO/CustomValueTable.php';

    $custom_id = 'custom_' . $customFieldID_description;
    $params = array('entityID' => $contribution->id, $custom_id => 1);
    $values = CRM_Core_BAO_CustomValueTable::getValues($params);
    $inkind_values[] = $values[$custom_id];

    $custom_id = 'custom_' . $customFieldID_appraisedby;
    $params = array('entityID' => $contribution->id, $custom_id => 1);
    $values = CRM_Core_BAO_CustomValueTable::getValues($params);
    $inkind_values[] = $values[$custom_id];

    $custom_id = 'custom_' . $customFieldID_appraiseraddress;
    $params = array('entityID' => $contribution->id, $custom_id => 1);
    $values = CRM_Core_BAO_CustomValueTable::getValues($params);
    $inkind_values[] = $values[$custom_id];

    $custom_id = 'custom_' . $customFieldID_cost;
    $params = array('entityID' => $contribution->id, $custom_id => 1);
    $values = CRM_Core_BAO_CustomValueTable::getValues($params);
    $inkind_values[] = $values[$custom_id];
  }

  $receipt = array(
    'receipt_no' => $receipt_no,
    'issued_on' =>  (int) $_SERVER['REQUEST_TIME'],
    'contact_id' => $contribution->contact_id,
    'receipt_amount' => $contribution->total_amount - $contribution->non_deductible_amount,
    'is_duplicate' => $is_duplicate,
    'issue_type' => 'single',
    'issue_method' => $method,
    'receive_date' => $contribution->receive_date,
    'source' => $contribution->source,
    'inkind_values' => $inkind_values,
  );

  $receipt['contributions'] = array(
    array(
      'contribution_id' => $contribution->id,
      'contribution_amount' => $contribution->total_amount,
      'receipt_amount' => $receipt['receipt_amount'],
      'receive_date' => $contribution->receive_date,
    )
  );

  return cdntaxreceipts_processTaxReceipt($receipt, $collectedPdf, $previewMode);
}

function cdntaxreceipts_eligibleForReceipt( $contributionId ) {
  // require_once('CRM/Contribute/DAO/Contribution.php');
  // $contribution =  new CRM_Contribute_DAO_Contribution();

  // $contribution->id = $contributionId;

  // if ( ! $contribution->find( TRUE ) ) {
  //   CRM_Core_Error::fatal( 'CDNTaxReceipts: Could not retrieve details for this contribution' );
  // }

  // echo '<pre>';
  // print_r($contribution);
  // die;

  // // 1. check that contribution amount is deductible
  // $deductibleAmount = $contribution->total_amount - $contribution->non_deductible_amount;

  // // 2. check if the contribution is of a Type that is indeed Tax receiptable.
  // $contributionType =  _cdntaxreceipts_get_type_for_contribution($contribution);

  // // 3. check if the Contribution Status is Completed ( i.e. = 1 )
  // $contributionStatus = $contribution->contribution_status_id;
  // if ( !isset($contributionStatus) ) {
  //   CRM_Core_Error::fatal( 'CDNTaxReceipts: Could not find status of this Contribution.' );
  // }

  // // invoke hook_cdntaxreceipts_eligible:
  // //   module implementations should return an array containing a single item,
  // //   either TRUE or FALSE. assumes TRUE until we receive a FALSE. one FALSE
  // //   disqualifies the contribution for a tax receipt.
  // $results = CRM_Utils_Hook::singleton()->invoke(1, $contribution, CRM_Utils_Hook::$_nullObject, CRM_Utils_Hook::$_nullObject, CRM_Utils_Hook::$_nullObject, CRM_Utils_Hook::$_nullObject, 'cdntaxreceipts_eligible');
  // $hookOk = TRUE;

  // if (is_array($results)) {
  //   foreach ( $results as $result ) {
  //     if ( $result == FALSE ) {
  //       $hookOk = FALSE;
  //     }
  //   }
  // }

  // if ( $contributionType->is_deductible && $contributionStatus == '1' && $contribution->is_test == 0 && $deductibleAmount > 0 && $hookOk ) {
    return TRUE;
  // }
  // else {
  //   return FALSE;
  // }

}

/**
 * issueAnnualTaxReceipt()
 * Issues an annual tax receipt for a given year.
 * Detects if the receipt is a duplicate and reacts appropriately.
 */
function cdntaxreceipts_issueAnnualTaxReceipt( $contactId, $year, &$collectedPdf = NULL, $previewMode = FALSE ) {
  require_once 'CRM/Cdntaxreceipts/PseudoConstants.php';
  $session = CRM_Core_Session::singleton();
  $current_user = $session->get('userID');  

  $params = array(
    'version' => 3,
    'sequential' => 1,
    'activity_type_id' => ACTIVITY_TYPE_ID_TAX,
    'contact_id' => $current_user,
    'custom_1' => $year,
    'custom_2' => 'grouped',
    'status_id' => '2',
    'target_contact_id' => $contactId,
  );
  $result = civicrm_api('Activity', 'create', $params);  

  // determine the send method
  list( $method, $email ) = cdntaxreceipts_sendMethodForContact($contactId);

  // query for duplicate receipt
  list( $issued_on, $receipt_id ) = cdntaxreceipts_annual_issued_on($contactId, $year);

  // When returning issued_on field:
  //   returns false for non existing $contribution ID
  //   returns 0 for existing but old data
  //   returns timestamp for new data
  $is_duplicate = empty($issued_on) ? 0 : 1;

  if ( $is_duplicate ) {
    // issue an identical receipt
    $receipt = cdntaxreceipts_load_receipt($receipt_id);
    $receipt['issued_on'] = (int) $_SERVER['REQUEST_TIME'];
    $receipt['is_duplicate'] = 1;
    $receipt['receive_date'] = $year;
    $receipt['issue_method'] = $method;
  }
  else {

    $contributions = cdntaxreceipts_contributions_not_receipted($contactId, $year);

    if ( count($contributions) == 0 ) {
      return array(FALSE, $method, NULL);
    }

    // calculate total amount
    $receiptContributions = array();
    $totalReceipt = 0;
    foreach ( $contributions as $c ) {
      $receiptContributions[] = array(
        'contribution_id' => $c['contribution_id'],
        'contribution_amount' => $c['total_amount'],
        'receipt_amount' => $c['total_amount'] - $c['non_deductible_amount'],
        'receive_date' => $c['receive_date'],
      );
      $totalReceipt += $c['total_amount'] - $c['non_deductible_amount'];
    }

    // generate a receipt number
    $receiptNo = CRM_Core_BAO_Setting::getItem(CDNTAX_SETTINGS, 'receipt_prefix') . str_pad($receiptContributions[0]['contribution_id'], 8, 0, STR_PAD_LEFT);

    $receipt = array(
      'receipt_no' => $receiptNo,
      'issued_on' =>  (int) $_SERVER['REQUEST_TIME'],
      'contact_id' => $contactId,
      'receipt_amount' => $totalReceipt,
      'is_duplicate' => 0,
      'issue_type' => 'annual',
      'issue_method' => $method,
      'receive_date' => $year,
      'contributions' => $receiptContributions,
    );

  }

  return cdntaxreceipts_processTaxReceipt($receipt, $collectedPdf, $previewMode);
}

/* determines the send method for the specified contact
 * returns array, [0] = 'email' or 'print', [1] = email address or NULL
 */
function cdntaxreceipts_sendMethodForContact( $contactId ) {

  $global_email = CRM_Core_BAO_Setting::getItem(CDNTAX_SETTINGS, 'enable_email', NULL, TRUE);
  if ( ! $global_email ) {
    return array('print', NULL);
  }

  require_once 'CRM/Contact/BAO/Contact.php';
  list($displayname, $email, $doNotEmail, $onHold) = CRM_Contact_BAO_Contact::getContactDetails($contactId);

  if ( isset($email) ) {
    if ( ! $doNotEmail && ! $onHold ) {
      return array('email', $email);
    }
  }

  return array('print', NULL);

}

function cdntaxreceipts_sendMethodForContribution( $contributionId ) {  

  $query = "SELECT contact_id FROM civicrm_contribution
                  WHERE  id = $contributionId";

  $dao = CRM_Core_DAO::executeQuery($query, CRM_Core_DAO::$_nullArray);
  if ($dao->fetch()) {
    $contact_id = $dao->contact_id;
  }
  return cdntaxreceipts_sendMethodForContact( $contact_id );

}

function cdntaxreceipts_openCollectedPDF() {
  return $pdf;
}


function cdntaxreceipts_sendCollectedPDF(&$pdf, $filename) {

}

/**
 * Isolate version checking code
 * @param $contribution
 * @return CRM_Contribute_DAO_ContributionType|CRM_Financial_DAO_FinancialType
 */
function _cdntaxreceipts_get_type_for_contribution($contribution) {
  // Require once lines are only needed if the civicrm.settings.php does not have the autoloader line
  require_once 'CRM/Utils/VersionCheck.php';
  $version_checker = CRM_Utils_VersionCheck::singleton();
  $majorVersion = floatval(substr($version_checker->localVersion, 0, 3));
  if ($majorVersion >= 4.3) {
    require_once 'CRM/Financial/DAO/FinancialType.php';
    $contributionType = new CRM_Financial_DAO_FinancialType();
    $contributionType->id = $contribution->financial_type_id;
    if ( ! $contributionType->find( TRUE ) ) {
      CRM_Core_Error::fatal( 'CDNTaxReceipts: Could not find corresponding contribution type.' );
    }
  }
  else { // Assume 4.2 or lower
    require_once 'CRM/Contribute/DAO/ContributionType.php';
    $contributionType = new CRM_Contribute_DAO_ContributionType();
    $contributionType->id = $contribution->contribution_type_id;
    if ( ! $contributionType->find( TRUE ) ) {
      CRM_Core_Error::fatal( 'CDNTaxReceipts: Could not find corresponding contribution type.' );
    }
  }
  return $contributionType;
}

function _cdntaxreceipts_get_contribution_dao() {
  // Require once lines are only needed if the civicrm.settings.php does not have the autoloader line
  require_once 'CRM/Utils/VersionCheck.php';
  $version_checker = CRM_Utils_VersionCheck::singleton();
  $majorVersion = floatval(substr($version_checker->localVersion, 0, 3));
  if ($majorVersion >= 4.3) {
    require_once 'CRM/Financial/DAO/FinancialType.php';
    $contributionType = new CRM_Financial_DAO_FinancialType();
  }
  else { // Assume 4.2 or lower
    require_once 'CRM/Contribute/DAO/ContributionType.php';
    $contributionType = new CRM_Contribute_DAO_ContributionType();
  }
  return $contributionType;
}

/**
 * Get the correct contact address. Get the billing address followed by the is_primary as a fallback.
 * @param $contact_id
 * @return array|mixed|null address : Contact address fixed with named country and state_province
 */
function cdntaxreceipts_getAddress($contact_id) {

  $address = NULL;
  // get Address information via contact
  $params = array(
    'version' => 3,
    'contact_id' => $contact_id,
    'is_billing' => 1,
  );


  $address_results = civicrm_api('Address', 'get', $params);

  if ( $address_results['is_error'] == 0) {
    $address = array_shift($address_results['values']);
  }

  if (!isset($address)) {
    $params = array(
      'version' => 3,
      'contact_id' => $contact_id,
      'is_primary' => 1,
    );
    $address_results = civicrm_api('Address', 'get', $params);

    if ( $address_results['is_error'] == 0) {
      $address = array_shift($address_results['values']);
    }

  }
  $address = isset($address) ? $address : array();
  // add actual names for province and country instead of just having ids
  require_once 'CRM/Core/BAO/Address.php';
  CRM_Core_BAO_Address::fixAddress($address);

  return $address;
}


function replaceReceiptTokens($str, &$receipt, $html = FALSE, $knownTokens = NULL){ 

    $str = CRM_Utils_Token::token_replace('receipt', 'receipt_no', $receipt['receipt_no'], $str);
    $str = CRM_Utils_Token::token_replace('receipt', 'issue_type', $receipt['issue_type'], $str);
    $str = CRM_Utils_Token::token_replace('receipt', 'receipt_amount', $receipt['receipt_amount'], $str);
    $str = CRM_Utils_Token::token_replace('receipt', 'receipt_date', $receipt['receipt_date'], $str);
    return $str;
}

